directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(name: String, paginated: Boolean! = false) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION
type Classes {
  name: String
  teacher: User!
  students(_size: Int, _cursor: String): StudentPage!
  _id: ID!
  _ts: Long!
}

input ClassesInput {
  name: String
  teacher: ClassesTeacherRelation
  students: ClassesStudentsRelation
}

type ClassesPage {
  data: [Classes]!
  after: String
  before: String
}

input ClassesStudentsRelation {
  create: [StudentInput]
  connect: [ID]
  disconnect: [ID]
}

input ClassesTeacherRelation {
  create: UserInput
  connect: ID
}

scalar Date

scalar Long

type Mutation {
  updateUser(id: ID!, data: UserInput!): User
  createUser(data: UserInput!): User!
  deleteSchool(id: ID!): School
  updateStudent(id: ID!, data: StudentInput!): Student
  createStudent(data: StudentInput!): Student!
  updateSchool(id: ID!, data: SchoolInput!): School
  deleteClasses(id: ID!): Classes
  updateClasses(id: ID!, data: ClassesInput!): Classes
  createClasses(data: ClassesInput!): Classes!
  deleteUser(id: ID!): User
  deleteStudent(id: ID!): Student
  createSchool(data: SchoolInput!): School!
}

type Query {
  findStudentByID(id: ID!): Student
  findUserByUID(uid: ID!): User
  findUserByID(id: ID!): User
  findClassesByID(id: ID!): Classes
  findSchoolByID(id: ID!): School
}

type School {
  city: String
  email: String
  state: String
  _id: ID!
  users(_size: Int, _cursor: String): UserPage!
  schoolName: String
  type: SchoolType
  phone: String
  _ts: Long!
}

input SchoolInput {
  schoolName: String
  email: String
  state: String
  city: String
  phone: String
  type: SchoolType
  users: SchoolUsersRelation
}

enum SchoolType {
  Islamic
  Masjid
  Other
}

input SchoolUsersRelation {
  create: [UserInput]
  connect: [ID]
  disconnect: [ID]
}

type Student {
  parent: User!
  classes(_size: Int, _cursor: String): ClassesPage!
  _id: ID!
  age: Int
  lastName: String
  firstName: String
  grade: String
  parentEmail: String
  _ts: Long!
}

input StudentClassesRelation {
  create: [ClassesInput]
  connect: [ID]
  disconnect: [ID]
}

input StudentInput {
  parent: StudentParentRelation
  parentEmail: String
  firstName: String
  lastName: String
  age: Int
  grade: String
  classes: StudentClassesRelation
}

type StudentPage {
  data: [Student]!
  after: String
  before: String
}

input StudentParentRelation {
  create: UserInput
  connect: ID
}

scalar Time

type User {
  school: School!
  children(_size: Int, _cursor: String): StudentPage!
  updatedAt: Time
  emailVerified: Boolean
  email: String
  classes(_size: Int, _cursor: String): ClassesPage!
  _id: ID!
  initalAccountCreation: Boolean
  accType: userAccType
  isActivated: Boolean
  lastName: String
  submittedApplication: Boolean
  firstName: String
  createdAt: Time
  isActive: Boolean
  uid: ID
  _ts: Long!
}

enum userAccType {
  Admin
  Teacher
  Parent
}

input UserChildrenRelation {
  create: [StudentInput]
  connect: [ID]
  disconnect: [ID]
}

input UserClassesRelation {
  create: [ClassesInput]
  connect: [ID]
  disconnect: [ID]
}

input UserInput {
  uid: ID
  firstName: String
  lastName: String
  email: String
  emailVerified: Boolean
  submittedApplication: Boolean
  isActivated: Boolean
  initalAccountCreation: Boolean
  isActive: Boolean
  accType: userAccType
  school: UserSchoolRelation
  classes: UserClassesRelation
  children: UserChildrenRelation
  createdAt: Time
  updatedAt: Time
}

type UserPage {
  data: [User]!
  after: String
  before: String
}

input UserSchoolRelation {
  create: SchoolInput
  connect: ID
}
